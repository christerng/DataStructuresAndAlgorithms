Assume: Appending element to array requires 1 cyber-dollar
Given: Growing array from size k to size 2k requires 3k cyber-dollars
Find: How much to charge for each append operation

Suppose we charge each append operation 7 cyber-dollars
Thus we overcharge each append operation that does not cause an overflow by 6 cyber-dollars

An overflow occurs when the array has 2^i elements, for some integer i >= 0, and the size of the array used by the array representing S is 2^i
Thus doubling the size of the array will require 3 * 2^i cyber-dollars

Base case (Base overflow):
[] -> [e]
Available: 7 cyber-dollars
Cost: 1 (from append) + 3 (from doubling) = 4 cyber-dollars

Inductive case (Generalized overflow):
[e0, e1,..., e(i-1)] -> [e0, e1, ..., e(i-1), ei], where i = 2^n for some integer n >= 0
Available: 7 + 6 * i/2 = 4 + 3 * i cyber-dollars
Cost: 1 (from append) + 3 * i (from doubling) cyber-dollars 

For all positive integer values of i, (4 + 3 * i) > (1 + 3 * i)
Thus, there will always be more cyber-dollars available than cyber-dollars of Cost
Thus, an amortization scheme in which each append operation is charged 7 cyber-dollars is valid
Thus, the execution of n append operations can be paid for using 7n cyber-dollars
Thus, the amortized running time of each append operation is O(1) and the total running time of n append operations in O(n)

